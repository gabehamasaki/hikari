###
# User Management API - Test Sequence
# Execute these requests in order to test the full workflow
###

@baseUrl = http://localhost:8081
@apiUrl = {{baseUrl}}/api/v1

### Step 1: Get API Info
GET {{baseUrl}}/

### Step 1.1: Get API v1 Info
GET {{apiUrl}}/

### Step 1.2: Health Check
GET {{apiUrl}}/health

### Step 2: Register a new user
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "password": "testpass123"
}

### Step 3: Login as admin (save token)
# @name adminLogin
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123"
}

### Step 4: Login as regular user (save token)
# @name userLogin
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "username": "john",
  "password": "password123"
}

### Step 5: Login as newly created user
# @name testUserLogin
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "testpass123"
}

### Step 6: Get profile as test user
GET {{apiUrl}}/profile
Authorization: Bearer {{testUserLogin.response.body.token}}

### Step 7: List users as authenticated user
GET {{apiUrl}}/users
Authorization: Bearer {{userLogin.response.body.token}}

### Step 8: Get specific user
GET {{apiUrl}}/users/1
Authorization: Bearer {{userLogin.response.body.token}}

### Step 9: Update own profile
PUT {{apiUrl}}/profile
Authorization: Bearer {{userLogin.response.body.token}}
Content-Type: application/json

{
  "email": "john.new@example.com"
}

### Step 10: Try to update another user (should fail)
PUT {{apiUrl}}/users/1
Authorization: Bearer {{userLogin.response.body.token}}
Content-Type: application/json

{
  "email": "shouldfail@example.com"
}

### Step 11: Admin - List all users
GET {{apiUrl}}/admin/users
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 11.1: Admin - Get system stats
GET {{apiUrl}}/admin/stats
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 12: Admin - Deactivate test user
PATCH {{apiUrl}}/admin/users/3/deactivate
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 13: Admin - Try to login as deactivated user (should fail)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "testpass123"
}

### Step 14: Admin - Reactivate user
PATCH {{apiUrl}}/admin/users/3/activate
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 15: Admin - Update any user
PUT {{apiUrl}}/users/2
Authorization: Bearer {{adminLogin.response.body.token}}
Content-Type: application/json

{
  "email": "john.admin.updated@example.com"
}

### Step 16: Admin - Delete user
DELETE {{apiUrl}}/users/3
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 17: Logout admin
POST {{apiUrl}}/auth/logout
Authorization: Bearer {{adminLogin.response.body.token}}

### Step 18: Logout regular user
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{userLogin.response.body.token}}
