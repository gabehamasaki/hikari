###
# Todo API - Test Sequence
# Execute these requests in order to test the full workflow
###

@baseUrl = http://localhost:8080

### Step 1: Get API Information
GET {{baseUrl}}/

### Step 2: List initial todos (should have sample data)
GET {{baseUrl}}/todos

### Step 3: Create first custom todo
# @name createTodo1
POST {{baseUrl}}/todos
Content-Type: application/json

{
  "title": "Learn Hikari-Go Framework",
  "content": "Study the Hikari-Go web framework and build sample applications"
}

### Step 4: Create second todo
# @name createTodo2
POST {{baseUrl}}/todos
Content-Type: application/json

{
  "title": "Write API Documentation",
  "content": "Create comprehensive API documentation with examples"
}

### Step 5: Create third todo (simple)
# @name createTodo3
POST {{baseUrl}}/todos
Content-Type: application/json

{
  "title": "Deploy to Production"
}

### Step 6: List all todos after creation
GET {{baseUrl}}/todos

### Step 7: Get details of first created todo
GET {{baseUrl}}/todos/{{createTodo1.response.body.id}}

### Step 8: Get details of second created todo
GET {{baseUrl}}/todos/{{createTodo2.response.body.id}}

### Step 9: Update first todo
PUT {{baseUrl}}/todos/{{createTodo1.response.body.id}}
Content-Type: application/json

{
  "title": "Master Hikari-Go Framework",
  "content": "Fully understand the Hikari-Go framework and create advanced applications",
  "completed": true
}

### Step 10: Update second todo (partial)
PUT {{baseUrl}}/todos/{{createTodo2.response.body.id}}
Content-Type: application/json

{
  "content": "Create comprehensive API documentation with examples and test cases"
}

### Step 11: Toggle completion status of third todo
PATCH {{baseUrl}}/todos/{{createTodo3.response.body.id}}/toggle

### Step 12: List completed todos
GET {{baseUrl}}/todos?status=completed

### Step 13: List pending todos
GET {{baseUrl}}/todos?status=pending

### Step 14: Toggle first todo back to pending
PATCH {{baseUrl}}/todos/{{createTodo1.response.body.id}}/toggle

### Step 15: List all todos after toggles
GET {{baseUrl}}/todos

### Step 16: Create todo with special characters
# @name createSpecialTodo
POST {{baseUrl}}/todos
Content-Type: application/json

{
  "title": "Test Special Chars: Ã¡Ã©Ã­Ã³Ãº Ã± ðŸš€",
  "content": "Testing unicode and emoji support in the API"
}

### Step 17: Create todo with long content
# @name createLongTodo
POST {{baseUrl}}/todos
Content-Type: application/json

{
  "title": "Long Content Task",
  "content": "This is a comprehensive task that involves multiple steps and detailed instructions. The purpose is to test how the API handles longer content and ensure that the storage and retrieval mechanisms work correctly with various content lengths. This task should demonstrate the robustness of the todo management system."
}

### Step 18: List all todos (should show all created)
GET {{baseUrl}}/todos

### Step 19: Delete the third todo
DELETE {{baseUrl}}/todos/{{createTodo3.response.body.id}}

### Step 20: Try to get deleted todo (should fail)
GET {{baseUrl}}/todos/{{createTodo3.response.body.id}}

### Step 21: List todos after deletion
GET {{baseUrl}}/todos

### Step 22: Mark special chars todo as completed
PUT {{baseUrl}}/todos/{{createSpecialTodo.response.body.id}}
Content-Type: application/json

{
  "completed": true
}

### Step 23: Mark long content todo as completed
PATCH {{baseUrl}}/todos/{{createLongTodo.response.body.id}}/toggle

### Step 24: Final list of completed todos
GET {{baseUrl}}/todos?status=completed

### Step 25: Final list of pending todos
GET {{baseUrl}}/todos?status=pending

### Step 26: Complete workflow - final todo list
GET {{baseUrl}}/todos

### Step 27: Clean up - delete special todo
DELETE {{baseUrl}}/todos/{{createSpecialTodo.response.body.id}}

### Step 28: Clean up - delete long todo
DELETE {{baseUrl}}/todos/{{createLongTodo.response.body.id}}

### Step 29: Final state after cleanup
GET {{baseUrl}}/todos
