### Chat App WebSocket & API Tests

# Testar APIs HTTP

### 1. Listar salas dispon√≠veis
GET http://localhost:8080/api/v1/rooms
Accept: application/json

###

### 2. Obter estat√≠sticas da sala geral
GET http://localhost:8080/api/v1/rooms/general/stats
Accept: application/json

###

### 3. Obter estat√≠sticas da sala de tecnologia
GET http://localhost:8080/api/v1/rooms/tech/stats
Accept: application/json

###

### 4. Obter estat√≠sticas da sala VIP
GET http://localhost:8080/api/v1/rooms/vip/stats
Accept: application/json

###

### 5. Enviar mensagem para sala geral via HTTP
POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "Sistema",
    "message": "Esta √© uma mensagem enviada via API HTTP!"
}

###

### 6. Enviar mensagem para sala tech via HTTP
POST http://localhost:8080/api/v1/rooms/tech/message
Content-Type: application/json

{
    "username": "Bot",
    "message": "Discuss√£o sobre tecnologia iniciada!"
}

###

### 7. Enviar mensagem de an√∫ncio
POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "Admin",
    "message": "üöÄ Bem-vindos ao chat Hikari! Este √© um exemplo de WebSocket em tempo real."
}

###

### 8. Teste de mensagem longa
POST http://localhost:8080/api/v1/rooms/random/message
Content-Type: application/json

{
    "username": "TestUser",
    "message": "Esta √© uma mensagem de teste mais longa para verificar como o sistema lida com conte√∫do extenso. O framework Hikari suporta WebSocket com funcionalidades completas como broadcast, hubs, e middleware de autentica√ß√£o."
}

###

### 9. Teste de caracteres especiais
POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "Usu√°rio_Teste",
    "message": "Teste com emojis üéâüöÄüíª e caracteres especiais: √°√ß√£√µ, @#$%!"
}

###

### 10. P√°gina principal (HTML)
GET http://localhost:8080/
Accept: text/html

###

### 11. CSS est√°tico
GET http://localhost:8080/static/style.css
Accept: text/css

###

### 12. JavaScript est√°tico
GET http://localhost:8080/static/app.js
Accept: application/javascript

###

# WebSocket Testing
#
# Para testar WebSocket, use ferramentas como:
# 1. Browser DevTools Console
# 2. wscat: npm install -g wscat
# 3. Postman WebSocket
# 4. A pr√≥pria interface web em http://localhost:8080

# Exemplos com wscat:

# Conectar √† sala geral:
# wscat -c ws://localhost:8080/ws/general

# Conectar √† sala VIP (com token):
# wscat -c "ws://localhost:8080/ws/vip?token=vip123&username=TestUser"

# Mensagens para enviar via WebSocket:

# Entrar na sala:
# {"type":"join","username":"TestUser","message":"entrou na sala"}

# Enviar mensagem:
# {"type":"message","username":"TestUser","message":"Ol√° pessoal!"}

# Indicar que est√° digitando:
# {"type":"typing","username":"TestUser"}

# Sair da sala:
# {"type":"leave","username":"TestUser","message":"saiu da sala"}

###

### Exemplo de teste de stress - M√∫ltiplas mensagens
POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "StressTest",
    "message": "Mensagem 1 - Teste de stress"
}

###

POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "StressTest",
    "message": "Mensagem 2 - Teste de stress"
}

###

POST http://localhost:8080/api/v1/rooms/general/message
Content-Type: application/json

{
    "username": "StressTest",
    "message": "Mensagem 3 - Teste de stress"
}
